// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.9.1
// source: pb/data.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RequestData) Reset() {
	*x = RequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestData) ProtoMessage() {}

func (x *RequestData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestData.ProtoReflect.Descriptor instead.
func (*RequestData) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{0}
}

func (x *RequestData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseData) Reset() {
	*x = ResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseData) ProtoMessage() {}

func (x *ResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseData.ProtoReflect.Descriptor instead.
func (*ResponseData) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_pb_data_proto protoreflect.FileDescriptor

var file_pb_data_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x21, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x88, 0x01, 0x0a, 0x03, 0x4d, 0x6f, 0x64, 0x12, 0x2a,
	0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x12, 0x0c, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x12, 0x0c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x28, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x12, 0x0c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pb_data_proto_rawDescOnce sync.Once
	file_pb_data_proto_rawDescData = file_pb_data_proto_rawDesc
)

func file_pb_data_proto_rawDescGZIP() []byte {
	file_pb_data_proto_rawDescOnce.Do(func() {
		file_pb_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_data_proto_rawDescData)
	})
	return file_pb_data_proto_rawDescData
}

var file_pb_data_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pb_data_proto_goTypes = []interface{}{
	(*RequestData)(nil),  // 0: RequestData
	(*ResponseData)(nil), // 1: ResponseData
}
var file_pb_data_proto_depIdxs = []int32{
	0, // 0: Mod.ServerMod:input_type -> RequestData
	0, // 1: Mod.ClientMod:input_type -> RequestData
	0, // 2: Mod.AllMod:input_type -> RequestData
	1, // 3: Mod.ServerMod:output_type -> ResponseData
	1, // 4: Mod.ClientMod:output_type -> ResponseData
	1, // 5: Mod.AllMod:output_type -> ResponseData
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_data_proto_init() }
func file_pb_data_proto_init() {
	if File_pb_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_data_proto_goTypes,
		DependencyIndexes: file_pb_data_proto_depIdxs,
		MessageInfos:      file_pb_data_proto_msgTypes,
	}.Build()
	File_pb_data_proto = out.File
	file_pb_data_proto_rawDesc = nil
	file_pb_data_proto_goTypes = nil
	file_pb_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ModClient is the client API for Mod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModClient interface {
	ServerMod(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (Mod_ServerModClient, error)
	ClientMod(ctx context.Context, opts ...grpc.CallOption) (Mod_ClientModClient, error)
	AllMod(ctx context.Context, opts ...grpc.CallOption) (Mod_AllModClient, error)
}

type modClient struct {
	cc grpc.ClientConnInterface
}

func NewModClient(cc grpc.ClientConnInterface) ModClient {
	return &modClient{cc}
}

func (c *modClient) ServerMod(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (Mod_ServerModClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mod_serviceDesc.Streams[0], "/Mod/ServerMod", opts...)
	if err != nil {
		return nil, err
	}
	x := &modServerModClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mod_ServerModClient interface {
	Recv() (*ResponseData, error)
	grpc.ClientStream
}

type modServerModClient struct {
	grpc.ClientStream
}

func (x *modServerModClient) Recv() (*ResponseData, error) {
	m := new(ResponseData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modClient) ClientMod(ctx context.Context, opts ...grpc.CallOption) (Mod_ClientModClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mod_serviceDesc.Streams[1], "/Mod/ClientMod", opts...)
	if err != nil {
		return nil, err
	}
	x := &modClientModClient{stream}
	return x, nil
}

type Mod_ClientModClient interface {
	Send(*RequestData) error
	CloseAndRecv() (*ResponseData, error)
	grpc.ClientStream
}

type modClientModClient struct {
	grpc.ClientStream
}

func (x *modClientModClient) Send(m *RequestData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modClientModClient) CloseAndRecv() (*ResponseData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modClient) AllMod(ctx context.Context, opts ...grpc.CallOption) (Mod_AllModClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mod_serviceDesc.Streams[2], "/Mod/AllMod", opts...)
	if err != nil {
		return nil, err
	}
	x := &modAllModClient{stream}
	return x, nil
}

type Mod_AllModClient interface {
	Send(*RequestData) error
	Recv() (*ResponseData, error)
	grpc.ClientStream
}

type modAllModClient struct {
	grpc.ClientStream
}

func (x *modAllModClient) Send(m *RequestData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modAllModClient) Recv() (*ResponseData, error) {
	m := new(ResponseData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModServer is the server API for Mod service.
type ModServer interface {
	ServerMod(*RequestData, Mod_ServerModServer) error
	ClientMod(Mod_ClientModServer) error
	AllMod(Mod_AllModServer) error
}

// UnimplementedModServer can be embedded to have forward compatible implementations.
type UnimplementedModServer struct {
}

func (*UnimplementedModServer) ServerMod(*RequestData, Mod_ServerModServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerMod not implemented")
}
func (*UnimplementedModServer) ClientMod(Mod_ClientModServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientMod not implemented")
}
func (*UnimplementedModServer) AllMod(Mod_AllModServer) error {
	return status.Errorf(codes.Unimplemented, "method AllMod not implemented")
}

func RegisterModServer(s *grpc.Server, srv ModServer) {
	s.RegisterService(&_Mod_serviceDesc, srv)
}

func _Mod_ServerMod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModServer).ServerMod(m, &modServerModServer{stream})
}

type Mod_ServerModServer interface {
	Send(*ResponseData) error
	grpc.ServerStream
}

type modServerModServer struct {
	grpc.ServerStream
}

func (x *modServerModServer) Send(m *ResponseData) error {
	return x.ServerStream.SendMsg(m)
}

func _Mod_ClientMod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModServer).ClientMod(&modClientModServer{stream})
}

type Mod_ClientModServer interface {
	SendAndClose(*ResponseData) error
	Recv() (*RequestData, error)
	grpc.ServerStream
}

type modClientModServer struct {
	grpc.ServerStream
}

func (x *modClientModServer) SendAndClose(m *ResponseData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modClientModServer) Recv() (*RequestData, error) {
	m := new(RequestData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mod_AllMod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModServer).AllMod(&modAllModServer{stream})
}

type Mod_AllModServer interface {
	Send(*ResponseData) error
	Recv() (*RequestData, error)
	grpc.ServerStream
}

type modAllModServer struct {
	grpc.ServerStream
}

func (x *modAllModServer) Send(m *ResponseData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modAllModServer) Recv() (*RequestData, error) {
	m := new(RequestData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Mod_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mod",
	HandlerType: (*ModServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerMod",
			Handler:       _Mod_ServerMod_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientMod",
			Handler:       _Mod_ClientMod_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllMod",
			Handler:       _Mod_AllMod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/data.proto",
}
